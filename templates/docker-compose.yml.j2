#jinja2: lstrip_blocks: True
# {{ ansible_managed }}
# Source: https://github.com/netbox-community/netbox-docker/blob/release/docker-compose.yml

services:
  netbox: &netbox
    image: {{ netbox_netbox_image }}
    depends_on:
      - postgres
      - valkey
      - valkey-cache
    env_file: env/netbox.env
    user: "unit:root"
    healthcheck:
      test: curl -f http://localhost:8080/login/ || exit 1
      start_period: 90s
      timeout: 3s
      interval: 15s
    volumes:
      - ./nginx-unit.json:/etc/unit/nginx-unit.json:ro
      - ./reports:/etc/netbox/reports:z,ro
      - ./scripts:/etc/netbox/scripts:z,ro
      - ./extra.py:/etc/netbox/config/extra.py:ro
      {% if not netbox_custom_pipeline_content=="" %}
      - ./custom_pipeline.py:/opt/netbox/netbox/netbox/custom_pipeline.py:ro
      {% endif %}
      {% if netbox_path_media=="" %}
      - netbox-media-files:/opt/netbox/media:z
      {% else %}
      - type: bind
        source: {{ netbox_path_media }}
        target: /opt/netbox/media
        # no equivalent to :z here
      {% endif %}
    security_opt:
      - seccomp:unconfined
    {% if netbox_port %}
    ports:
      - "{{ netbox_port }}:8080"
    {% else %}
    expose:
      - "8080"
    {% endif %}
    restart: unless-stopped
    {% if netbox_container_labels %}
    labels:
      {{ netbox_container_labels | to_nice_yaml | indent(6) }}
    {%- endif %}
    networks:
      - default
    {% if netbox_additional_network_names %}
      {% for network in netbox_additional_network_names %}
      - {{ network }}
      {% endfor %}
    {% endif %}

  netbox-worker: &netbox-worker
    <<: *netbox
    depends_on:
      valkey:
        condition: service_healthy
      netbox:
        condition: service_healthy
    command:
      - /opt/netbox/venv/bin/python
      - /opt/netbox/netbox/manage.py
      - rqworker
    ports: []
    expose: []
    labels: []
    healthcheck:
      test: ps -aux | grep -v grep | grep -q rqworker || exit 1
      start_period: 20s
      timeout: 3s
      interval: 15s
    networks:
      - default
    restart: unless-stopped

  netbox-housekeeping:
    <<: *netbox-worker
    command:
      - /opt/netbox/housekeeping.sh
    healthcheck:
      test: ps -aux | grep -v grep | grep -q housekeeping || exit 1
      start_period: 20s
      timeout: 3s
      interval: 15s

  postgres:
    image: {{ netbox_postgres_image }}
    env_file: env/postgres.env
    volumes:
      {% if netbox_path_postgres=="" %}
      - netbox-postgres-data:/var/lib/postgresql/data
      {% else %}
      - type: bind
        source: {{ netbox_path_postgres }}
        target: /var/lib/postgresql/data
      {% endif %}
    networks:
      - default
    restart: unless-stopped
    healthcheck:
      test: pg_isready -q -t 2 -d $$POSTGRES_DB -U $$POSTGRES_USER
      start_period: 20s
      timeout: 30s
      interval: 10s
      retries: 5

  valkey:
    image: {{ netbox_valkey_image }}
    command:
      - sh
      - -c # this is to evaluate the $VALKEY_PASSWORD from the env
      - valkey-server --appendonly yes --requirepass $$VALKEY_PASSWORD ## $$ because of docker-compose
    env_file: env/valkey.env
    volumes:
      {% if netbox_path_valkey=="" %}
      - netbox-valkey-data:/data
      {% else %}
      - type: bind
        source: {{ netbox_path_valkey }}
        target: /data
      {% endif %}
    networks:
      - default
    restart: unless-stopped
    healthcheck: &valkey-healthcheck
      test: '[ $$(valkey-cli --pass "$${VALKEY_PASSWORD}" ping) = ''PONG'' ]'
      start_period: 5s
      timeout: 3s
      interval: 1s
      retries: 5

  valkey-cache:
    image: {{ netbox_valkey_image }}
    command:
      - sh
      - -c # this is to evaluate the $VALKEY_PASSWORD from the env
      - valkey-server --requirepass $$VALKEY_PASSWORD ## $$ because of docker-compose
    env_file: env/valkey-cache.env
    networks:
      - default
    restart: unless-stopped
    healthcheck: *valkey-healthcheck

  {% if netbox_use_caddy and (netbox_ssl_cert_bundle or netbox_caddy_letsencrypt_email) %}
  tls:
    image: {{netbox_caddy_image}}
    restart: unless-stopped
    depends_on:
      netbox:
        condition: service_healthy
    volumes:
      - type: bind
        source: /etc/timezone
        target: /etc/timezone
        read_only: true
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
      - type: bind
        source: ./Caddyfile
        target: "/etc/caddy/Caddyfile"
        read_only: true
      {% if netbox_ssl_cert_bundle %}
      - type: bind
        source: "{{netbox_ssl_cert_bundle}}"
        target: "/etc/ssl/private/cert.crt"
        read_only: true
      - type: bind
        source: "{{netbox_ssl_cert_key}}"
        target: "/etc/ssl/private/key.key"
        read_only: true
      {% endif %}
      - type: volume
        source: netbox-caddy-data
        target: /data
      - type: volume
        source: netbox-caddy-config
        target: /config
    ports:
      - "{{netbox_caddy_http_port}}:80" # Allow for http redirect
      - "{{netbox_caddy_https_port}}:443"
  {% endif %}

volumes:
  netbox-media-files:
{% if netbox_path_media=="" %}
    driver: local
{% endif %}
  netbox-postgres-data:
{% if netbox_path_postgres=="" %}
    driver: local
{% endif %}
  netbox-valkey-data:
{% if netbox_path_valkey=="" %}
    driver: local
{% endif %}
{% if netbox_use_caddy %}
  netbox-caddy-data:
  netbox-caddy-config:
{% endif %}

{% if netbox_additional_network_names %}
networks:
{% for network in netbox_additional_network_names %}
  {{ network }}:
    name: {{ network }}
    external: true
{% endfor %}
{% endif %}
